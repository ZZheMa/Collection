第一天
1.sizeof 一个对象，求得的数据部分的尺寸，而不求代码（也就是函数）的尺寸。
一个对象数据和函数是分开存储的，有数据段，代码段等。涉及到C++对象模型的知识。
这样的设计即多份数据共用一份代码（函数）只适用于单cpu执行的情况。一个CPU一次只能执行一条指令，所以每个对象都有自己的函数代码
所生成的指令是没用的，因为cpu每次只能执行一条指令，也就是只能访问一个对象的指令。但是这样的对象模型如果是并行计算则会出现问题。
例如对象A在CPU1里面跑，对象B在CPU2里面跑，那么编译器只生成一份函数指令则会出现问题，因为两个对象要同时执行这个指令，即两个CPU
的程序指针同时指向该函数指令所在的内存。设计到并行机的知识。


第二天
1.一个类声明和实现分别写到头文件和源文件中，这样成员函数是非inline的。声明时用inline修饰就可以使该成员函数成为inline的。
如果一个类声明和实现写在一起，也就是在类里面直接写实现，这样成员函数是inline的。
2.C语言函数是禁止嵌套定义，必须嵌套调用。

第三天
1.静态先于main函数的执行而存在。
2.所有计算机理论在杨力祥看来不外乎两个词：序和可识别。
3.数据结构的那些设计就是由于硬件的设计所导致的。
4.鉴赏力：例如拿一本书翻几页，知道它要实现个什么东西，然后合上书，自己去思考，
去设计。自己设计完之后，再打开书和别人的去对比，这样就能发现大师设计的想法是多么优秀。
可以看到自己跟大师的差距。学东西最怕的就是学了十几二十年看不到自己和别人差在哪里。
一个人有没有水平就体现在鉴赏力上面，能不能看出它好在哪里。
5.用体系性思维去思考问题，把一个东西放到体系里面去思考。
6.C语言调用函数时将局部变量压栈出栈，那么如果将所有的局部变量都定义为静态可以吗？
不难发现静态全局的访问速度更快，而压栈还需要不断的进栈出栈。栈是动态使用内存，
静态变量是静态使用内存，也就是编译器已经算好它的大小及数量等。如果将局部变量定义为静态，
所有的情况都可以解决，但是有一个问题解决不了，就是自己调用自己，或者说递归。
说明C语言在设计时，递归在整个体系结构中占了很重要的地位。
7.指针是地址吗？如果指针是地址为什么还要起这么个名字，直接叫地址不就好了。
在计算机里指针主要分为两大类，一个是指令指针，也就是程序指针，另一个就是数据指针，
数据指针往往用寄存器来代替。指针就是一个指向数据的地址吗？在计算机中每个字节就是一个地址，
但是一个数据不一定只占有一个地址。指针指向的是一个数据的首地址，且指针是有类型的。当拿到一个指针的时候，
也就是拿到了一个数据的首地址，拿到首地址后应该向下数几个字节来拼成这个数据，就由指针的类型确定，
拼成这个数据之后，编译器如何解析这个数据，例如4个字节，该解析为int还是float，这个也由指针的类型来确定。 
8.指针的三个优点。第一，以小搏大。即就地解决，山不过来，我过去的思想。用于函数传参时传址。
传参时不把所有数据都带过去，复制一遍，而是将所有数据的内存地址传过去。
第二，切换。指令的切换，函数指针，也就是指令指针，例如动态链接库，用指针在动态链接库里来回切换函数，
调用里面的各种函数。数据的切换，数组不是一个类型，只是一个组数据的打包。数据的切换例如数组中的行指针列指针的应用。
第三，就是挂接，最常用的挂接就是链表。用指针把一组数据连接起来。


















